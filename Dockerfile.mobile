# Multi-stage Mobile App Docker Container
# Stage 1: Base development environment
FROM node:22-bullseye AS base

# Set environment variables
ENV ANDROID_HOME=/opt/android-sdk
ENV PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmdline-tools/latest/bin
ENV HOME=/root

# Install system dependencies
RUN apt-get update && apt-get install -y \
    wget \
    unzip \
    openjdk-11-jdk \
    git \
    curl \
    build-essential \
    python3 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Set JAVA_HOME after installation
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64

# Verify Java installation
RUN java -version && echo "JAVA_HOME: $JAVA_HOME" && ls -la $JAVA_HOME

# Install pnpm
RUN npm install -g pnpm@9

# Create android SDK directory
RUN mkdir -p $ANDROID_HOME

# Download and install Android Command Line Tools
RUN wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/commandlinetools.zip \
    && unzip -q /tmp/commandlinetools.zip -d $ANDROID_HOME \
    && mv $ANDROID_HOME/cmdline-tools $ANDROID_HOME/cmdline-tools-temp \
    && mkdir -p $ANDROID_HOME/cmdline-tools/latest \
    && mv $ANDROID_HOME/cmdline-tools-temp/* $ANDROID_HOME/cmdline-tools/latest/ \
    && rm -rf $ANDROID_HOME/cmdline-tools-temp \
    && rm /tmp/commandlinetools.zip

# Accept Android SDK licenses
RUN yes | sdkmanager --licenses

# Install required Android SDK components
RUN sdkmanager "platform-tools" \
    "platforms;android-34" \
    "platforms;android-33" \
    "build-tools;34.0.0" \
    "build-tools;33.0.0" \
    "system-images;android-34;google_apis;x86_64" \
    "emulator"

# Install Gradle
RUN wget -q https://services.gradle.org/distributions/gradle-8.5-bin.zip -O /tmp/gradle.zip \
    && unzip -q /tmp/gradle.zip -d /opt \
    && rm /tmp/gradle.zip
ENV PATH=$PATH:/opt/gradle-8.5/bin

# Install React Native CLI
RUN npm install -g @react-native-community/cli

# Install Maestro for E2E testing
RUN curl -Ls "https://get.maestro.mobile.dev" | bash
ENV PATH="$HOME/.maestro/bin:$PATH"

# Stage 2: Development environment
FROM base AS development

WORKDIR /app

# Copy package files first for better caching
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/app/package.json ./packages/app/
COPY packages/shared/package.json ./packages/shared/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY packages/app ./packages/app
COPY packages/shared ./packages/shared

# Build shared package
RUN cd packages/shared && pnpm build

# Set working directory to app
WORKDIR /app/packages/app

# Expose Metro bundler port
EXPOSE 8081

# Create entrypoint script
RUN echo '#!/bin/bash\n\
set -e\n\
echo "🚀 Starting React Native Mobile Development Environment"\n\
echo "📱 Android SDK: $ANDROID_HOME"\n\
echo "☕ Java: $JAVA_HOME"\n\
echo "🔧 Node: $(node --version)"\n\
echo "📦 pnpm: $(pnpm --version)"\n\
echo "🤖 Android Platform Tools: $(adb --version | head -1)"\n\
echo "🎯 Gradle: $(gradle --version | grep Gradle)"\n\
\n\
# Start ADB server\n\
adb start-server || echo "ADB server start failed (may not have devices)"\n\
\n\
# Execute the command passed to container\n\
exec "$@"' > /entrypoint.sh && chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
CMD ["pnpm", "start"]

# Stage 3: Builder environment for CI/CD
FROM base AS builder

WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/app/package.json ./packages/app/
COPY packages/shared/package.json ./packages/shared/

# Install dependencies
RUN pnpm install --frozen-lockfile --prod

# Copy source code
COPY packages/app ./packages/app
COPY packages/shared ./packages/shared

# Build shared package
RUN cd packages/shared && pnpm build

# Set working directory to app
WORKDIR /app/packages/app

# Make gradlew executable
RUN chmod +x android/gradlew

# Build Android APK
RUN cd android && ./gradlew assembleDebug assembleRelease

# Create build verification script
RUN echo '#!/bin/bash\n\
echo "🏗️ Android Build Complete"\n\
echo "📱 Debug APK: $(find android/app/build/outputs/apk/debug -name "*.apk" | head -1)"\n\
echo "📱 Release APK: $(find android/app/build/outputs/apk/release -name "*.apk" | head -1)"\n\
ls -la android/app/build/outputs/apk/debug/\n\
ls -la android/app/build/outputs/apk/release/' > /build-info.sh && chmod +x /build-info.sh

CMD ["/build-info.sh"]
