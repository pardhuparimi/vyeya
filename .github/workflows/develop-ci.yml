name: 🧪 Develop CI - Testing Only

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: write
  issues: write
  statuses: write

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9.15.0'

jobs:
  # Phase 1: Quality Gate - Code Quality & Unit Tests
  quality-gate:
    name: 🚦 Quality Gate
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          pnpm install --frozen-lockfile || pnpm install
          echo "✅ Dependencies installed"
      
      - name: 🔍 Lint & Type Check
        run: |
          echo "🔍 Running linting and type checks..."
          cd packages/server && pnpm lint && pnpm type-check
          cd ../shared && pnpm type-check
          echo "✅ Code quality checks passed"
      
      - name: 🧪 Unit Tests
        run: |
          echo "🧪 Running unit tests..."
          cd packages/server && pnpm test:unit
          echo "✅ Unit tests passed"
      
      - name: 🔒 Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Security Results
        if: always() && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: 🧹 Cleanup Quality Gate
        if: always()
        run: |
          echo "🧹 Cleaning up Quality Gate resources..."
          # Clean up any processes that might have been started
          pkill -f "pnpm.*" 2>/dev/null || true
          pkill -f "node.*" 2>/dev/null || true
          echo "✅ Quality Gate cleanup completed"

  # Phase 2: Integration Tests using Docker
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: quality-gate
    
    steps:
      - uses: actions/checkout@v4
      
      - name: 🐳 Build CI Test Environment
        run: |
          echo "🐳 Building Docker test environment..."
          docker compose -f docker-compose.ci.yml build
      
      - name: 🚀 Start Test Services
        run: |
          echo "🚀 Starting PostgreSQL and Redis..."
          docker compose -f docker-compose.ci.yml up -d postgres-test redis-test
          
          # Wait for services to be ready
          echo "⏳ Waiting for services..."
          sleep 10
          
          # Check if services are running
          docker compose -f docker-compose.ci.yml ps
      
      - name: 🔗 Run Integration Tests
        run: |
          echo "🔗 Running E2E integration tests in Docker environment..."
          docker compose -f docker-compose.ci.yml run --rm ci-test bash -c "
            cd /workspace &&
            pnpm install --frozen-lockfile &&
            echo '🗃️ Initializing test database...' &&
            cd packages/server &&
            export POSTGRES_HOST='postgres-test' &&
            export POSTGRES_USER='test' &&
            export POSTGRES_PASSWORD='test' &&
            export POSTGRES_DB='vyeya_test' &&
            export POSTGRES_PORT='5432' &&
            pnpm exec ts-node src/scripts/init-db.ts &&
            echo '🧪 Starting E2E integration tests...' &&
            export REDIS_URL='redis://redis-test:6379' &&
            export NODE_ENV=test &&
            export CI=true &&
            echo '🔗 Running real integration tests with database...' &&
            pnpm test:e2e --verbose &&
            echo '📊 Running basic HTTP route tests...' &&
            pnpm test:http --verbose
          "
      
      - name: 🧹 Cleanup Integration Tests
        if: always()
        run: |
          echo "🧹 Cleaning up Integration Tests resources..."
          # Stop and remove all Docker containers and volumes
          docker compose -f docker-compose.ci.yml down -v --remove-orphans 2>/dev/null || true
          # Clean up any orphaned containers
          docker container prune -f 2>/dev/null || true
          docker volume prune -f 2>/dev/null || true
          echo "✅ Integration Tests cleanup completed"

  # Phase 3: Mobile E2E Tests
  mobile-e2e-tests:
    name: 📱 Mobile E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: vyeya_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}
      
      - name: Setup Java for Android
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
          cmake-version: 3.22.1
          ndk-version: 26.1.10909125
      
      - name: Install Maestro CLI
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
      
      - name: Start Backend Services
        run: |
          echo "🚀 Starting backend services for mobile testing..."
          
          # Wait for GitHub Actions services to be ready
          echo "⏳ Waiting for database services..."
          sleep 15
          
          # Verify services are ready using GitHub Actions services
          for i in {1..20}; do
            if nc -z localhost 5433; then
              echo "✅ PostgreSQL ready"
              break
            fi
            echo "⏳ Waiting for PostgreSQL... ($i/20)"
            sleep 3
          done
          
          cd packages/server
          pnpm install --frozen-lockfile
          
          # Initialize database with correct environment
          export POSTGRES_HOST=localhost POSTGRES_PORT=5433 POSTGRES_USER=test POSTGRES_PASSWORD=test POSTGRES_DB=vyeya_test
          export NODE_ENV=test
          pnpm exec ts-node src/scripts/init-db.ts
          
          # Build server before starting
          pnpm build
          
          # Start server with proper environment
          export POSTGRES_HOST=localhost POSTGRES_PORT=5433 POSTGRES_USER=test POSTGRES_PASSWORD=test POSTGRES_DB=vyeya_test
          export REDIS_URL=redis://localhost:6380
          export NODE_ENV=test
          export PORT=3000
          pnpm start > server.log 2>&1 &
          
          # Wait for server to be ready with better error handling
          echo "⏳ Waiting for backend server..."
          for i in {1..30}; do
            if curl -s --max-time 5 http://localhost:3000/health > /dev/null 2>&1; then
              echo "✅ Backend server ready"
              break
            fi
            echo "⏳ Waiting for backend... ($i/30)"
            if [ $i -eq 30 ]; then
              echo "❌ Backend server failed to start"
              echo "🔍 Server logs:"
              cat server.log || echo "No server logs found"
              exit 1
            fi
            sleep 10
          done
      
      - name: Setup E2E Test Data
        run: |
          echo "📊 Setting up E2E test data..."
          ./scripts/setup-e2e-data.sh
      
      - name: Run Mobile E2E Tests
        run: |
          echo "📱 Running headless mobile E2E tests..."
          ./scripts/ci-e2e-tests.sh true
      
      - name: 🧹 Cleanup Mobile E2E Tests
        if: always()
        run: |
          echo "🧹 Cleaning up Mobile E2E Tests resources..."
          # Stop backend server
          pkill -f "pnpm.*start" 2>/dev/null || true
          pkill -f "tsx.*src/index.ts" 2>/dev/null || true
          # Clean up any additional Docker containers that might have been created
          docker stop postgres-mobile-test redis-mobile-test 2>/dev/null || true
          docker rm postgres-mobile-test redis-mobile-test 2>/dev/null || true
          # Clean up processes using our ports
          lsof -ti:3000,5433,6380 | xargs kill -9 2>/dev/null || true
          # The GitHub Actions services (postgres/redis) will be cleaned up automatically
          echo "✅ Mobile E2E Tests cleanup completed"
          
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mobile-e2e-results
          path: |
            packages/app/maestro/results/
            packages/app/maestro/logs/

  # Summary
  develop-ci-summary:
    name: ✅ Develop CI Summary
    runs-on: ubuntu-latest
    needs: [quality-gate, integration-tests, mobile-e2e-tests]
    if: always()
    
    steps:
      - name: 📊 CI Results
        run: |
          echo "🌿 Develop Branch CI Results:"
          echo "✅ Quality Gate: ${{ needs.quality-gate.result }}"
          echo "✅ Integration Tests: ${{ needs.integration-tests.result }}"
          echo "✅ Mobile E2E Tests: ${{ needs.mobile-e2e-tests.result }}"
          echo ""
          echo "📊 Test Summary:"
          echo "  • Unit Tests: 166 tests"
          echo "  • Integration Tests: 17 tests"
          echo "  • Mobile E2E Tests: 8 tests (Android + iOS)"
          echo "  • Total Tests: 191 tests"
          echo ""
          echo "🎯 Purpose: Complete code quality validation and mobile testing"
          echo "📝 Next Steps: Create PR to main branch for full deployment pipeline"
          
          if [[ "${{ needs.quality-gate.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" && "${{ needs.mobile-e2e-tests.result }}" == "success" ]]; then
            echo "🎉 All checks passed! Ready for main branch deployment."
          else
            echo "❌ Some checks failed. Please review and fix issues."
            exit 1
          fi
