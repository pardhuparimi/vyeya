name: 🧪 Develop CI - Testing Only

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9.15.0'

jobs:
  # Phase 1: Quality Gate - Code Quality & Unit Tests
  quality-gate:
    name: 🚦 Quality Gate
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 🔍 Lint & Type Check
        run: |
          echo "🔍 Running linting and type checks..."
          cd packages/server && pnpm lint && pnpm type-check
          cd ../shared && pnpm type-check
          echo "✅ Code quality checks passed"
      
      - name: 🧪 Unit Tests
        run: |
          echo "🧪 Running unit tests..."
          cd packages/server && pnpm test:unit
          echo "✅ Unit tests passed"
      
      - name: 🔒 Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Security Results
        if: always() && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Phase 2: Integration Tests using Docker
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: quality-gate
    
    steps:
      - uses: actions/checkout@v4
      
      - name: 🐳 Build CI Test Environment
        run: |
          echo "🐳 Building Docker test environment..."
          docker compose -f docker-compose.ci.yml build
      
      - name: 🚀 Start Test Services
        run: |
          echo "🚀 Starting PostgreSQL and Redis..."
          docker compose -f docker-compose.ci.yml up -d postgres-test redis-test
          
          # Wait for services to be ready
          echo "⏳ Waiting for services..."
          sleep 10
          
          # Check if services are running
          docker compose -f docker-compose.ci.yml ps
      
      - name: 🔗 Run Integration Tests
        run: |
          echo "🔗 Running HTTP integration tests in Docker environment..."
          docker compose -f docker-compose.ci.yml run --rm ci-test bash -c "
            cd /workspace &&
            pnpm install --frozen-lockfile &&
            echo '🗃️ Initializing test database...' &&
            cd packages/server &&
            export DB_HOST='postgres-test' &&
            export DB_USER='test' &&
            export DB_PASSWORD='test' &&
            export DB_NAME='vyeya_test' &&
            export DB_PORT='5432' &&
            node src/scripts/init-db.js &&
            echo '🧪 Starting server HTTP integration tests...' &&
            export POSTGRES_HOST='postgres-test' &&
            export POSTGRES_USER='test' &&
            export POSTGRES_PASSWORD='test' &&
            export POSTGRES_DB='vyeya_test' &&
            export POSTGRES_PORT='5432' &&
            export REDIS_URL='redis://redis-test:6379' &&
            export NODE_ENV=test &&
            export CI=true &&
            pnpm test:http --verbose
          "
      
      - name: 🧹 Cleanup
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v

  # Summary
  develop-ci-summary:
    name: ✅ Develop CI Summary
    runs-on: ubuntu-latest
    needs: [quality-gate, integration-tests]
    if: always()
    
    steps:
      - name: 📊 CI Results
        run: |
          echo "🌿 Develop Branch CI Results:"
          echo "✅ Quality Gate: ${{ needs.quality-gate.result }}"
          echo "✅ Integration Tests: ${{ needs.integration-tests.result }}"
          echo ""
          echo "🎯 Purpose: Code quality validation and integration testing"
          echo "📝 Next Steps: Create PR to main branch for full deployment pipeline"
          
          if [[ "${{ needs.quality-gate.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "🎉 All checks passed! Ready for main branch deployment."
          else
            echo "❌ Some checks failed. Please review and fix issues."
            exit 1
          fi
