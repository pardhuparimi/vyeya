name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'release/*', 'feature/*']
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9.15.0'

jobs:
  # Phase 1: Quick Quality Gate - All checks in one job for speed
  quality-gate:
    name: 🔍 Quality Gate
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      environment: ${{ steps.check.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 🔎 Lint & Type Check
        run: |
          pnpm lint
          pnpm type-check
      
      - name: 🧪 Unit Tests
        run: |
          cd packages/server
          pnpm test --coverage --maxWorkers=2
      
      - name: 🔒 Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Security Results
        if: always() && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Determine deployment
        id: check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=qa" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "environment=none" >> $GITHUB_OUTPUT
          fi

  # Phase 2: Integration Tests (only if deploying)
  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.should-deploy == 'true'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: vyeya_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 🔗 Run Integration Tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/vyeya_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: |
          cd packages/server
          pnpm test:integration

  # Phase 3: Build & Deploy (only if integration passes)
  deploy:
    name: 🚀 Deploy (${{ needs.quality-gate.outputs.environment }})
    runs-on: ubuntu-latest
    needs: [quality-gate, integration]
    if: needs.quality-gate.outputs.should-deploy == 'true'
    environment:
      name: ${{ needs.quality-gate.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 🏗️ Build
        run: |
          cd packages/server
          pnpm build
      
      - name: 🐳 Build Docker Image
        run: |
          docker build -f packages/server/Dockerfile -t vyeya-server:${{ github.sha }} packages/server
      
      - name: 🚀 Deploy to ${{ needs.quality-gate.outputs.environment }}
        id: deploy
        run: |
          echo "🚀 Deploying to ${{ needs.quality-gate.outputs.environment }}"
          
          # Set deployment URL based on environment
          case "${{ needs.quality-gate.outputs.environment }}" in
            "production")
              echo "url=https://vyeya.app" >> $GITHUB_OUTPUT
              ;;
            "dev") 
              echo "url=https://dev.vyeya.app" >> $GITHUB_OUTPUT
              ;;
            "qa")
              echo "url=https://qa.vyeya.app" >> $GITHUB_OUTPUT
              ;;
          esac
          
          # Add your actual deployment commands here based on environment
          # Examples:
          # aws ecs update-service --cluster vyeya-${{ needs.quality-gate.outputs.environment }}
          # kubectl apply -f k8s/${{ needs.quality-gate.outputs.environment }}/
          # terraform apply -var-file=environments/${{ needs.quality-gate.outputs.environment }}.tfvars

  # Phase 4: Post-Deploy Validation (only for production)
  post-deploy:
    name: 🎯 Post-Deploy Tests
    runs-on: ubuntu-latest
    needs: [quality-gate, deploy]
    if: needs.quality-gate.outputs.environment == 'production'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: 🔥 Load Tests
        run: |
          echo "🔥 Running load tests against production"
          # cd packages/server && k6 run k6-load-test.js --vus 10 --duration 60s
      
      - name: 🎭 E2E Tests
        run: |
          echo "🎭 Running E2E tests against production"
          # maestro test packages/app/maestro/comprehensive_test.yaml
