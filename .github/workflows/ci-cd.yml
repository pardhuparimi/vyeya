name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, release/*]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9.15.0'

jobs:
  # PHASE 1: Code Quality & Security (runs in parallel)
  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Lint code
        run: pnpm lint
        
      - name: Type check
        run: pnpm type-check

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run npm audit
        run: pnpm audit --audit-level high
        continue-on-error: true
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # PHASE 2: Unit Tests (depends on lint/security)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run unit tests
        run: pnpm test:unit
        env:
          CI: true
          
      - name: Generate coverage report
        run: pnpm test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

  # PHASE 3: Build & Integration Tests (depends on unit tests)
  build-and-integration-test:
    name: Build & Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: vyeya_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build server
        run: pnpm build:server
        
      - name: Run database migrations
        run: pnpm db:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vyeya_test
          
      - name: Seed test data
        run: pnpm db:seed
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vyeya_test
          
      - name: Run integration tests
        run: pnpm test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vyeya_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci-testing
          NODE_ENV: test
          
      - name: Build Docker image
        run: docker build -t vyeya-api:${{ github.sha }} -f packages/server/Dockerfile .
          
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vyeya-api:${{ github.sha }}'
          format: 'sarif'
          output: 'docker-trivy-results.sarif'
        continue-on-error: true
          
      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'docker-trivy-results.sarif'
        continue-on-error: true
          
      - name: Save Docker image
        run: docker save vyeya-api:${{ github.sha }} | gzip > api-image.tar.gz
        
      - name: Upload API image artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-image-${{ github.sha }}
          path: api-image.tar.gz
          retention-days: 1

  # PHASE 4: Mobile Build (Android) - runs in parallel with build-and-integration-test
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            packages/app/android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Generate Android release keystore (if provided)
        run: |
          if [ -n "${{ secrets.ANDROID_KEYSTORE }}" ]; then
            echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > packages/app/android/app/release.keystore
          else
            echo "No Android keystore provided, building debug version"
          fi
          
      - name: Build Android APK
        run: |
          cd packages/app/android
          if [ -f app/release.keystore ]; then
            ./gradlew assembleRelease
          else
            ./gradlew assembleDebug
          fi
        env:
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          
      - name: Sign APK (if release keystore available)
        run: |
          if [ -f packages/app/android/app/release.keystore ] && [ -n "${{ secrets.ANDROID_STORE_PASSWORD }}" ]; then
            jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
              -keystore packages/app/android/app/release.keystore \
              -storepass ${{ secrets.ANDROID_STORE_PASSWORD }} \
              -keypass ${{ secrets.ANDROID_KEY_PASSWORD }} \
              packages/app/android/app/build/outputs/apk/release/app-release-unsigned.apk \
              release
          else
            echo "Skipping APK signing - using debug build"
          fi
          
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ github.sha }}
          path: packages/app/android/app/build/outputs/apk/**/*.apk
          retention-days: 7

  # PHASE 5: Mobile Build (iOS) - runs in parallel with Android
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: [unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Install CocoaPods dependencies
        run: |
          cd packages/app/ios
          pod install
          
      - name: Setup iOS certificates (if provided)
        run: |
          if [ -n "${{ secrets.IOS_CERTIFICATE_P12 }}" ]; then
            echo "${{ secrets.IOS_CERTIFICATE_P12 }}" | base64 -d > ios-cert.p12
            security create-keychain -p "" build.keychain
            security import ios-cert.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -A
            security list-keychains -s build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "" build.keychain
          else
            echo "No iOS certificate provided, skipping certificate setup"
          fi
          
      - name: Setup provisioning profile (if provided)
        run: |
          if [ -n "${{ secrets.IOS_PROVISIONING_PROFILE }}" ]; then
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          else
            echo "No iOS provisioning profile provided, skipping profile setup"
          fi
          
      - name: Build iOS app
        run: |
          cd packages/app
          if [ -n "${{ secrets.IOS_CERTIFICATE_P12 }}" ]; then
            # Build signed release
            xcodebuild -workspace ios/Vyeya.xcworkspace \
              -scheme Vyeya \
              -configuration Release \
              -archivePath ios/build/Vyeya.xcarchive \
              archive
          else
            # Build debug version (no signing)
            xcodebuild -workspace ios/Vyeya.xcworkspace \
              -scheme Vyeya \
              -configuration Debug \
              -destination 'generic/platform=iOS Simulator' \
              build
          fi
          
      - name: Export IPA (if signed)
        run: |
          cd packages/app
          if [ -n "${{ secrets.IOS_CERTIFICATE_P12 }}" ]; then
            xcodebuild -exportArchive \
              -archivePath ios/build/Vyeya.xcarchive \
              -exportPath ios/build \
              -exportOptionsPlist ios/ExportOptions.plist
          else
            echo "No iOS certificate provided, skipping IPA export"
          fi
            
      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-${{ github.sha }}
          path: |
            packages/app/ios/build/*.ipa
            packages/app/ios/build/*.xcarchive
          retention-days: 7

  # PHASE 6: E2E Tests (depends on builds being complete)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build-and-integration-test, build-android]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Download API Docker image
        uses: actions/download-artifact@v4
        with:
          name: api-image-${{ github.sha }}
          
      - name: Load API Docker image
        run: docker load < api-image.tar.gz
        
      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk-${{ github.sha }}
          path: packages/app/android/app/build/outputs/apk/
          
      - name: Setup Android emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          script: |
            # Start API server
            docker run -d -p 3000:3000 --name api-server vyeya-api:${{ github.sha }}
            sleep 10
            
            # Install and run E2E tests
            npx maestro test packages/app/maestro/comprehensive_test.yaml

  # PHASE 7: Load Testing (runs after integration tests)
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: [build-and-integration-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download API Docker image
        uses: actions/download-artifact@v4
        with:
          name: api-image-${{ github.sha }}
          
      - name: Load API Docker image
        run: docker load < api-image.tar.gz
        
      - name: Setup test environment
        run: |
          docker run -d -p 3000:3000 --name api-server vyeya-api:${{ github.sha }}
          sleep 10
          
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: Run load tests
        run: k6 run packages/server/k6-load-test.js

  # PHASE 8: Deployments (only on specific branches)
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [e2e-tests, load-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Download API Docker image
        uses: actions/download-artifact@v4
        with:
          name: api-image-${{ github.sha }}
          
      - name: Load and push Docker image to ECR
        run: |
          docker load < api-image.tar.gz
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          docker tag vyeya-api:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vyeya-api:dev-${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vyeya-api:dev-${{ github.sha }}
          
      - name: Deploy to ECS Development
        run: |
          aws ecs update-service \
            --cluster vyeya-dev \
            --service vyeya-api-dev \
            --force-new-deployment \
            --desired-count 1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, load-tests]
    if: startsWith(github.ref, 'refs/heads/release/') && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Download API Docker image
        uses: actions/download-artifact@v4
        with:
          name: api-image-${{ github.sha }}
          
      - name: Load and push Docker image to ECR
        run: |
          docker load < api-image.tar.gz
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          docker tag vyeya-api:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vyeya-api:staging-${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vyeya-api:staging-${{ github.sha }}
          
      - name: Deploy to ECS Staging
        run: |
          aws ecs update-service \
            --cluster vyeya-staging \
            --service vyeya-api-staging \
            --force-new-deployment \
            --desired-count 2

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, load-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Download API Docker image
        uses: actions/download-artifact@v4
        with:
          name: api-image-${{ github.sha }}
          
      - name: Load and push Docker image to ECR
        run: |
          docker load < api-image.tar.gz
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          docker tag vyeya-api:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vyeya-api:prod-${{ github.sha }}
          docker tag vyeya-api:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vyeya-api:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vyeya-api:prod-${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vyeya-api:latest
          
      - name: Deploy to ECS Production
        run: |
          aws ecs update-service \
            --cluster vyeya-prod \
            --service vyeya-api-prod \
            --force-new-deployment \
            --desired-count 3

  # PHASE 9: Mobile App Store Deployments (only on main)
  deploy-mobile-stores:
    name: Deploy to App Stores
    runs-on: macos-latest
    needs: [build-ios, build-android, deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-app-${{ github.sha }}
          path: ios-artifacts/
          
      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-apk-${{ github.sha }}
          path: android-artifacts/
          
      - name: Deploy to TestFlight
        run: |
          if [ -f ios-artifacts/*.ipa ]; then
            xcrun altool --upload-app --type ios --file ios-artifacts/*.ipa --username "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_APP_PASSWORD }}"
          else
            echo "No iOS IPA found for TestFlight deployment"
          fi
          
      - name: Deploy to Google Play (Internal Testing)
        run: |
          if [ -f android-artifacts/release/*.apk ]; then
            # Use Google Play Console API or fastlane for deployment
            echo "Deploy to Google Play Console - implement with fastlane or API"
          else
            echo "No signed Android APK found for Play Store deployment"
          fi

  # PHASE 10: Post-deployment verification
  post-deployment-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run production health checks
        run: |
          curl -f https://api.vyeya.com/health || exit 1
          
      - name: Run production smoke tests
        run: |
          # Add smoke tests here
          echo "Running production smoke tests..."
          
      - name: Notify deployment success
        run: |
          echo "🚀 Production deployment successful!"
          # Add Slack/Discord notification here if needed
