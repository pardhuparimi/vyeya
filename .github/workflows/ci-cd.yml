name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, release/*]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Lint code
        run: pnpm lint
        
      - name: Type check
        run: pnpm type-check
        
      - name: Run unit tests
        run: pnpm test:unit
        env:
          CI: true
          
      - name: Generate coverage report
        run: pnpm test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run npm audit
        run: pnpm audit --audit-level high
        continue-on-error: true
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript, typescript

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Dependency Review
        uses: actions/dependency-review-action@v4

  build-and-test-api:
    name: Build and Test API
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: vyeya_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build server
        run: pnpm build:server
        
      - name: Run database migrations
        run: pnpm db:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vyeya_test
          
      - name: Seed test data
        run: pnpm db:seed
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vyeya_test
          
      - name: Run integration tests
        run: pnpm test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vyeya_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci-testing
          NODE_ENV: test
          
      - name: Run API load tests
        run: |
          pnpm --filter server start &
          SERVER_PID=$!
          sleep 10
          
          # Install k6 for load testing
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
          # Run load tests
          k6 run packages/server/k6-load-test.js || echo "Load test completed"
          
          kill $SERVER_PID
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vyeya_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci-testing
          NODE_ENV: test
          PORT: 3000
          
      - name: Build Docker image
        run: |
          docker build -t vyeya-api:${{ github.sha }} -f packages/server/Dockerfile .
          
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vyeya-api:${{ github.sha }}'
          format: 'sarif'
          output: 'docker-trivy-results.sarif'
          
      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'docker-trivy-results.sarif'
          
      - name: Save Docker image
        run: docker save vyeya-api:${{ github.sha }} | gzip > api-image.tar.gz
        
      - name: Upload API image artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-image-${{ github.sha }}
          path: api-image.tar.gz
          retention-days: 1

  build-mobile:
    name: Build Mobile App
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            packages/app/android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Generate Android release keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > packages/app/android/app/release.keystore
        env:
          ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
          
      - name: Build Android APK
        run: |
          cd packages/app/android
          ./gradlew assembleRelease
        env:
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          
      - name: Sign APK
        run: |
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore packages/app/android/app/release.keystore \
            -storepass ${{ secrets.ANDROID_STORE_PASSWORD }} \
            -keypass ${{ secrets.ANDROID_KEY_PASSWORD }} \
            packages/app/android/app/build/outputs/apk/release/app-release-unsigned.apk \
            release
            
      - name: Verify APK
        run: jarsigner -verify packages/app/android/app/build/outputs/apk/release/app-release-unsigned.apk
          
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ github.sha }}
          path: packages/app/android/app/build/outputs/apk/release/
          retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: macos-14
    needs: [build-and-test-api, build-mobile]
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Setup Maestro
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          
      - name: Download API Docker image
        uses: actions/download-artifact@v4
        with:
          name: api-image-${{ github.sha }}
          
      - name: Start API server
        run: |
          docker load < api-image.tar.gz
          docker run -d --name vyeya-api \
            -p 3000:3000 \
            -e NODE_ENV=test \
            -e DATABASE_URL=sqlite:///tmp/test.db \
            -e JWT_SECRET=test-secret-key \
            vyeya-api:${{ github.sha }}
          
          # Wait for API to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
          
      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk-${{ github.sha }}
          path: ./apk
          
      - name: Start Android emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            adb devices
            adb install ./apk/app-release-unsigned.apk
            
            # Run E2E tests with Maestro
            maestro test packages/app/maestro/
            
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ github.sha }}
          path: |
            packages/app/maestro/results/
            ~/.maestro/tests/
          retention-days: 7
          
      - name: Stop API server
        if: always()
        run: docker stop vyeya-api || true

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-test-api, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Download API image
        uses: actions/download-artifact@v4
        with:
          name: api-image-${{ github.sha }}
          
      - name: Load and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vyeya-api
        run: |
          docker load < api-image.tar.gz
          docker tag vyeya-api:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:dev-${{ github.sha }}
          docker tag vyeya-api:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:dev-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev-${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev-latest
          
      - name: Deploy to ECS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vyeya-api
        run: |
          # Update ECS task definition with new image
          aws ecs describe-task-definition \
            --task-definition vyeya-api-dev \
            --query taskDefinition > task-definition.json
          
          # Update image URI in task definition
          jq --arg IMAGE_URI "$ECR_REGISTRY/$ECR_REPOSITORY:dev-${{ github.sha }}" \
            '.containerDefinitions[0].image = $IMAGE_URI | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)' \
            task-definition.json > new-task-definition.json
          
          # Register new task definition
          aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json
          
          # Update ECS service
          aws ecs update-service \
            --cluster vyeya-dev \
            --service vyeya-api-dev \
            --task-definition vyeya-api-dev \
            --force-new-deployment
            
      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster vyeya-dev \
            --services vyeya-api-dev \
            --max-attempts 30 \
            --delay 30

  deploy-qa:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: startsWith(github.ref, 'refs/heads/release/')
    environment: qa
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Download API image
        uses: actions/download-artifact@v4
        with:
          name: api-image-${{ github.sha }}
          
      - name: Load and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vyeya-api
        run: |
          docker load < api-image.tar.gz
          docker tag vyeya-api:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:qa-${{ github.sha }}
          docker tag vyeya-api:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:qa-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:qa-${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:qa-latest
          
      - name: Deploy to ECS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vyeya-api
        run: |
          # Update ECS task definition with new image
          aws ecs describe-task-definition \
            --task-definition vyeya-api-qa \
            --query taskDefinition > task-definition.json
          
          # Update image URI in task definition
          jq --arg IMAGE_URI "$ECR_REGISTRY/$ECR_REPOSITORY:qa-${{ github.sha }}" \
            '.containerDefinitions[0].image = $IMAGE_URI | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)' \
            task-definition.json > new-task-definition.json
          
          # Register new task definition
          aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json
          
          # Update ECS service
          aws ecs update-service \
            --cluster vyeya-qa \
            --service vyeya-api-qa \
            --task-definition vyeya-api-qa \
            --force-new-deployment
            
      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster vyeya-qa \
            --services vyeya-api-qa \
            --max-attempts 30 \
            --delay 30

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Download API image
        uses: actions/download-artifact@v4
        with:
          name: api-image-${{ github.sha }}
          
      - name: Load and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vyeya-api
        run: |
          docker load < api-image.tar.gz
          docker tag vyeya-api:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:prod-${{ github.sha }}
          docker tag vyeya-api:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:prod-${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
      - name: Deploy to ECS (Blue/Green)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vyeya-api
        run: |
          # Update ECS task definition with new image
          aws ecs describe-task-definition \
            --task-definition vyeya-api-prod \
            --query taskDefinition > task-definition.json
          
          # Update image URI in task definition
          jq --arg IMAGE_URI "$ECR_REGISTRY/$ECR_REPOSITORY:prod-${{ github.sha }}" \
            '.containerDefinitions[0].image = $IMAGE_URI | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)' \
            task-definition.json > new-task-definition.json
          
          # Register new task definition
          aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json
          
          # Update ECS service with rolling deployment
          aws ecs update-service \
            --cluster vyeya-prod \
            --service vyeya-api-prod \
            --task-definition vyeya-api-prod \
            --deployment-configuration maximumPercent=200,minimumHealthyPercent=50
            
      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster vyeya-prod \
            --services vyeya-api-prod \
            --max-attempts 60 \
            --delay 30
            
      - name: Run post-deployment health checks
        run: |
          # Get the load balancer URL from ECS service
          LB_URL=$(aws ecs describe-services \
            --cluster vyeya-prod \
            --services vyeya-api-prod \
            --query 'services[0].loadBalancers[0].targetGroupArn' \
            --output text)
          
          if [ "$LB_URL" != "None" ]; then
            # Wait for health checks to pass
            sleep 60
            echo "Deployment completed successfully"
          fi
          
      - name: Create GitHub release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Production deployment of commit ${{ github.sha }}
            
            Changes:
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
