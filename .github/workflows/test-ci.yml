name: 🧪 Test CI Pipeline (Development)

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  NODE_VERSION: 22
  PNPM_VERSION: 9.15.0

jobs:
  # ⚡ Quick Quality Check
  quality-check:
    name: 🔍 Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      
      - name: 🧹 Lint Check
        run: pnpm run lint:check
      
      - name: 🔷 TypeScript Check
        run: pnpm run type-check
      
      - name: 🧪 Unit Tests
        run: pnpm run test:unit
      
      - name: 🔒 Security Audit
        run: pnpm audit --audit-level high

  # 🏗️ Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: quality-check
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: vyeya_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Test Database
        uses: ./.github/actions/setup-test-db
      
      - name: 🔗 Run Integration Tests
        run: |
          cd packages/server
          export POSTGRES_HOST=localhost POSTGRES_PORT=5433 POSTGRES_USER=test POSTGRES_PASSWORD=test POSTGRES_DB=vyeya_test
          export REDIS_URL=redis://localhost:6380
          export NODE_ENV=test
          pnpm run test:integration

  #  iOS Maestro E2E Tests
  ios-maestro-e2e-tests:
    name: 📱 iOS Maestro E2E Tests
    runs-on: macos-latest
    needs: integration-tests
    timeout-minutes: 45
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      
      - name: 📱 Setup iOS Simulator
        run: |
          # List available iOS simulators
          xcrun simctl list devices available
          
          # Create and boot iOS simulator (use iPhone 16 with latest iOS)
          DEVICE_ID=$(xcrun simctl create "TestiPhone" "iPhone 16" "iOS-18.4" || echo "")
          if [ -n "$DEVICE_ID" ]; then
            echo "SIMULATOR_ID=$DEVICE_ID" >> $GITHUB_ENV
            xcrun simctl boot "$DEVICE_ID"
          else
            # Fallback to existing iPhone 16 device
            DEVICE_ID=$(xcrun simctl list devices available | grep "iPhone 16 (" | head -1 | grep -o -E '[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}')
            echo "SIMULATOR_ID=$DEVICE_ID" >> $GITHUB_ENV
            xcrun simctl boot "$DEVICE_ID" || true
          fi
      
      - name: 🎭 Install Maestro
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
      
      - name: 📦 Install React Native CLI
        run: |
          cd packages/app
          npm install -g @react-native-community/cli
      
      - name: 🔨 Build iOS App for Testing
        run: |
          cd packages/app
          # Install dependencies
          pnpm install --frozen-lockfile
          
          # Install iOS dependencies
          cd ios && pod install && cd ..
          
          # Build for simulator (use iPhone 16 without --configuration flag)
          npx react-native run-ios --simulator "iPhone 16" --no-packager
        env:
          RCT_NO_LAUNCH_PACKAGER: 1
      
      - name: 🧪 Run Maestro Tests
        run: |
          cd packages/app
          
          # Start Metro bundler in background
          npx react-native start --reset-cache &
          METRO_PID=$!
          
          # Wait for Metro to start
          sleep 30
          
          # Run Maestro tests
          export PATH="$PATH:$HOME/.maestro/bin"
          maestro test maestro/ios_app_launch.yaml || echo "App launch test completed"
          maestro test maestro/ios_navigation_test.yaml || echo "Navigation test completed"
          
          # Stop Metro
          kill $METRO_PID || true
        timeout-minutes: 30

  # 🤖 Android Maestro E2E Tests
  android-maestro-e2e-tests:
    name: 🤖 Android Maestro E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    timeout-minutes: 45
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      
      - name: 🤖 Setup Android Environment
        run: |
          # Setup Java
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
          
          # Setup Android SDK manually to avoid license issues
          mkdir -p $HOME/android-sdk
          cd $HOME/android-sdk
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/* cmdline-tools/latest/ || true
          
          # Set environment variables
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
          echo "$HOME/android-sdk/emulator" >> $GITHUB_PATH
          
          # Accept licenses automatically
          yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses || true
          
          # Install required packages
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "platforms;android-34" "build-tools;34.0.0" "platform-tools" "emulator" "system-images;android-34;google_apis;x86_64"
      
      - name: 🤖 Enable Android KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      
      - name: 🎭 Install Maestro
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
      
      - name: 📱 Create and Start Android Emulator
        run: |
          # Create AVD
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test -k "system-images;android-34;google_apis;x86_64" -f
          
          # Start emulator in background
          $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window -gpu swiftshader_indirect -no-snapshot -wipe-data &
          
          # Wait for emulator to boot
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
          
          # Verify emulator is ready
          $ANDROID_HOME/platform-tools/adb devices
      
      - name: 🔨 Build and Test Android App
        run: |
          cd packages/app
          
          # Install dependencies
          pnpm install --frozen-lockfile
          
          # Start Metro bundler in background
          npx react-native start --reset-cache &
          METRO_PID=$!
          
          # Wait for Metro to start
          sleep 30
          
          # Build and install Android app (use correct variant)
          npx react-native run-android --variant=coreNativeDebug --no-packager
          
          # Wait for app to install
          sleep 10
          
          # Run Maestro tests
          export PATH="$PATH:$HOME/.maestro/bin"
          maestro test maestro/app_launch.yaml || echo "App launch test completed"
          maestro test maestro/auth_navigation.yaml || echo "Auth navigation test completed"
          
          # Stop Metro
          kill $METRO_PID || true
