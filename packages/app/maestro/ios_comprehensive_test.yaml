appId: org.reactjs.native.example.Vyeya
---
# Test 1: App Launch and Loading Flow with clean state
# Clear app state to ensure we start from login screen
- clearState
- launchApp
- waitForAnimationToEnd:
    timeout: 10000

# Either see loading screen first, or directly see auth screen
# Wait for auth screen to appear after loading
- extendedWaitUntil:
    visible: 
      id: "auth-title"
    timeout: 20000

# Test 2: Basic UI Elements
- assertVisible: 
    id: "email-input"
- assertVisible:
    id: "password-input"
- assertVisible: "LOGIN"
- assertVisible: "Need an account? Sign Up"

# Test 3: Form Interaction with invalid credentials (should fail)
- tapOn:
    id: "email-input"
- eraseText
- inputText: "test@example.com"

- tapOn:
    id: "password-input"  
- eraseText
- inputText: "testpassword"

# Test 4: Login Attempt with invalid credentials (expecting failure)
- tapOn: "LOGIN"
- waitForAnimationToEnd:
    timeout: 5000

# Handle the login failed alert that appears
- assertVisible: "Login failed"
- tapOn: "OK"  # Dismiss the alert
- waitForAnimationToEnd:
    timeout: 2000

# Test 5: Navigation Test - Switch to signup mode (should work now that alert is dismissed)
- tapOn: "Need an account? Sign Up"
- waitForAnimationToEnd:
    timeout: 3000

# Verify we switched to signup mode
- assertVisible: "Already have an account? Login"

# Test 6: Switch back to login mode
- tapOn: "Already have an account? Login"
- waitForAnimationToEnd:
    timeout: 3000

# Verify we're back to login mode
- assertVisible: "Need an account? Sign Up"

# Test 7: Test with valid credentials (should succeed)
- tapOn:
    id: "email-input"
- eraseText
- inputText: "seller@vyeya.com"

- tapOn:
    id: "password-input"  
- eraseText
- inputText: "password"

# Submit login - should succeed
- tapOn: "LOGIN"
- waitForAnimationToEnd:
    timeout: 10000

# After successful login, we should navigate away from auth screen
# The auth-title should no longer be visible
- assertNotVisible:
    id: "auth-title"
