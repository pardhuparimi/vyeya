# Dockerfile for React Native Android Development
FROM node:22-bullseye

# Install required system packages including OpenJDK 17
RUN apt-get update && apt-get install -y \
    wget \
    unzip \
    openjdk-17-jdk \
    git \
    python3 \
    python3-pip \
    curl \
    build-essential \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set correct JAVA_HOME for Java 17 on ARM64 architecture
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-arm64
ENV PATH=$PATH:$JAVA_HOME/bin

# Verify Java installation
RUN java -version && javac -version

# Install Android SDK
ENV ANDROID_HOME=/opt/android-sdk
ENV ANDROID_SDK_ROOT=$ANDROID_HOME
ENV PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools

# Create Android SDK directory
RUN mkdir -p $ANDROID_HOME

# Download and install Android command line tools
RUN cd $ANDROID_HOME && \
    wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip && \
    unzip commandlinetools-linux-11076708_latest.zip && \
    rm commandlinetools-linux-11076708_latest.zip && \
    mkdir -p cmdline-tools/latest && \
    mv cmdline-tools/* cmdline-tools/latest/ || true

# Accept Android SDK licenses and install required packages
RUN yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses && \
    $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
        "platform-tools" \
        "platforms;android-34" \
        "build-tools;34.0.0"

# Install React Native CLI globally
RUN npm install -g @react-native-community/cli

# Install Maestro for mobile testing
RUN curl -Ls "https://get.maestro.mobile.dev" | bash
ENV PATH="$PATH:/root/.maestro/bin"

# Set working directory
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy package files for dependency installation
COPY pnpm-workspace.yaml ./
COPY package.json ./
COPY pnpm-lock.yaml ./
COPY packages/app/package.json ./packages/app/
COPY packages/shared/package.json ./packages/shared/

# Install dependencies using pnpm
RUN pnpm install --frozen-lockfile

# Copy the entire app with proper directory structure
COPY packages/ ./packages/

# Set working directory to the app
WORKDIR /app/packages/app

# Create build script
RUN echo '#!/bin/bash\n\
set -e\n\
echo "Building React Native Android app..."\n\
echo "Running pre-build steps..."\n\
npx react-native doctor || true\n\
cd android\n\
echo "Cleaning build..."\n\
./gradlew clean\n\
echo "Building debug APK..."\n\
./gradlew assembleDebug\n\
echo "Build completed successfully!"\n\
echo "APK location: android/app/build/outputs/apk/debug/app-debug.apk"\n\
ls -la app/build/outputs/apk/debug/ || echo "APK not found - check build output above"\n\
' > /app/packages/app/build.sh && chmod +x /app/packages/app/build.sh

# Set the entrypoint
CMD ["/app/packages/app/build.sh"]
